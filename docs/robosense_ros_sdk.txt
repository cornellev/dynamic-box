### https://github.com/RoboSense-LiDAR/rsLiDAR_sdk

~ws/src/
├── rslidar_sdk/
│   ├── 
│   ├──          
│   └──              
└── rslidar_msg/       
    └── 
        ├──
        ├──        
        └── 

in ~/ws/src:
git clone https://github.com/RoboSense-LiDAR/rslidar_sdk.git
cd rslidar_sdk
git submodule init
git submodule update

sudo apt-get update
sudo apt-get install -y libyaml-cpp-dev

sudo apt-get install -y  libpcap-dev

in ~/ws/src:
git clone https://github.com/RoboSense-LiDAR/rslidar_msg.git

in ~/ws/src:
colcon build --packages-select rslidar_msg rslidar_sdk
source install/setup.bash

CHANGE THE CONFIG:
config.yaml

TO OPEN rviz
ros2 launch rslidar_sdk start.py

TO FIND LiDAR PORT NUMBER ON WIRESHARK:
On Alienware: sudo WIRESHARK

Turn off wifi to find ports:
Blue fin -> display tag: arp

Forward packets from Alienware to local:
on Alienware: sudo sysctl -w net.ipv4.ip_forward=1

from ackermann_kf/my_rosbag_reader:
colcon build --packages-select my_rosbag_reader --symlink-install
source install/setup.bash
ros2 pkg executables my_rosbag_reader
see:
my_rosbag_reader listener
my_rosbag_reader rs_listener

in ~/ws/src:
ros2 launch rslidar_sdk start.py

config.yaml:
common:
  msg_source: 3                         # 0: not use Lidar
                                        # 1: packet message comes from online Lidar
                                        # 2: packet message comes from ROS or ROS2
                                        # 3: packet message comes from Pcap file
  send_packet_ros: false                # true: Send packets through ROS or ROS2(Used to record packet)
  send_point_cloud_ros: true            # true: Send point cloud through ROS or ROS2
lidar:
  - driver:
      lidar_type: RSHELIOS             #  LiDAR type - RS16, RS32, RSBP, RSAIRY, RSHELIOS, RSHELIOS_16P, RS128, RS80, RS48, RSP128, RSP80, RSP48, 
                                   #               RSM1, RSM1_JUMBO, RSM2, RSM3, RSE1, RSMX.
                                   
      msop_port: 6699              #  Msop port of lidar
      difop_port: 7788             #  Difop port of lidar
      imu_port: 0                  #  IMU port of lidar(only for RSAIRY, RSE1), 0 means no imu.
                                   #  If you want to use IMU, please first set ENABLE_IMU_DATA_PARSE to ON in CMakeLists.txt 
      user_layer_bytes: 0          #  Bytes of user layer. thers is no user layer if it is 0         
      tail_layer_bytes: 0          #  Bytes of tail layer. thers is no tail layer if it is 0


      min_distance: 0.2            #  Minimum distance of point cloud
      max_distance: 200            #  Maximum distance of point cloud
      use_lidar_clock: true        #  true--Use the lidar clock as the message timestamp
                                   #  false-- Use the system clock as the timestamp
      dense_points: false          #  true: discard NAN points; false: reserve NAN points
      
      ts_first_point: true         #  true: time-stamp point cloud with the first point; false: with the last point;   
                                   #  these parameters are used from mechanical lidar

      start_angle: 0               #  Start angle of point cloud
      end_angle: 360               #  End angle of point cloud

                                   #  When msg_source is 3, the following parameters will be used
      pcap_repeat: true            #  true: The pcap bag will repeat play   
      pcap_rate: 1.0               #  Rate to read the pcap file
      pcap_path: /root/ws/src/ackermann_kf/my_rosbag_reader/my_rosbag_reader/test_cloud.pcap #The path of pcap file

    ros:
      ros_frame_id: rslidar                           #Frame id of packet message and point cloud message
      ros_recv_packet_topic: /rslidar_packets          #Topic used to receive lidar packets from ROS
      ros_send_packet_topic: /rslidar_packets          #Topic used to send lidar packets through ROS
      ros_send_imu_data_topic: /rslidar_imu_data         #Topic used to send imu data through ROS
      ros_send_point_cloud_topic: /rslidar_points      #Topic used to send point cloud through ROS
      ros_queue_length: 100                            #Topic QoS history depth



to link cpp with py: python3 setup.py build_ext --inplace



Parallelize: 

First very initial scan:
normal Euclidean cluster extraction: 1 seed -> grow many

Take the centroids of this first scan, these are now the seeds:
For future scans:
In parallel, grow 1 cluster for each seed.
Collect all clusters + remaining points
Grow remaining points with normal Euclidean cluster extraction: 1 seed -> grow many

maybe some merging step we will see




Additional installations:
sudo apt install libopencv-dev